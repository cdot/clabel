#!/usr/bin/perl -w

# C-Label designer for Brother 1230PC label printer
# Crawford Currie (C) 2015 http://c-dot.co.uk
# Based on B-Label (C) 2012 A. Sovijärvi (ari@sovijarvi.fi)
# Distributed under the Perl Artistic License.

use strict;
use warnings;

# Before attempting to upgrade to Gtk3, make sure Pango::Cairo perl bindings
# are available and work. They weren't on 8/10/17
use Gtk2 -init;
use Cairo ();
use GD ();
use Getopt::Long ();
use Data::Dumper ();
use File::Basename ();
use File::Temp ();
use Encode ();
use Data::Dumper;
use IO::Select;

# Don't use constant because it doesn't work in classes

our $GLADE_FILE = File::Basename::dirname(__FILE__).'/clabel.glade';
our $SETTINGS_FILE = "$ENV{HOME}/.config/clabel";

our @GLOBAL_CFG = ( 'font' );
our @PER_LABEL_CFG = (
    'text', 'bold', 'italic', 'underline', 'tt',
    'sub', 'sup', 'halign', 'hmargin', 'inverse'
    );

our @BLACK = ( 0, 0, 0 );
our @WHITE = ( 255, 255, 255 );
our @RED   = ( 0, 0, 255 );
our @GREEN   = ( 0, 255, 0 );

our $INTER_LABEL_GAP = 4; # pixels
our $HIGHLIGHT_BORDER = 2; # highlight border

# Methods for saving and loading config items
our $CONFIG = {
    default => {
        save => sub { $_[0]->get_active() },
        load => sub { $_[0]->set_active($_[1]) },
    },
    inverse => {
        save => sub { $_[0]->get_active() ? 1 : 0 }
    },
    hmargin => {
        save => sub { $_[0]->get_value() }
    },
    font => {
        save => sub { $_[0]->get_font_name() },
        load => sub { $_[0]->set_font_name($_[1]) },
    }
};

our $ui;
# List of Labels objects
our @labels;
# Index of current labe;
our $current_label = -1;
our $default_fontdesc; # a font descriptor

our $printer;

# Report to stdout
sub report {
    sub dump_struct {
        my $s = Data::Dumper->Dump([shift]);
        $s =~ s/^.*?= //;
        $s =~ s/;$//;
        return $s;
    }
    print join(
        '',
        map {
            !defined($_) ? 'undef' :
          ref($_)
            ? ( UNIVERSAL::can($_, 'stringify')
                ? $_->stringify()
                : ( UNIVERSAL::can($_, 'to_string')
                    ? $_->to_string() : dump_struct($_)))
            :  $_
       } @_) . "\n";
}

{
    # See
    # http://support.brother.com/g/b/productseries.aspx?c=gb&lang=en&pcatid=21
    # http://www.undocprint.org/formats/page_description_languages/brother_p-touch
    # https://github.com/cbdevnet/pt1230
    # http://etc.nkadesign.com/uploads/Printers/95CRRASE.pdf
    package Printer;

    our %PROTOCOL = (
        INVALIDATE => chr(0),
        INITIALISE_CLEAR => chr(0x1B).'@',
        SET_RASTER_TRANSFER_MODE => chr(0x1B).'iR'.chr(0x01),
        SEND_PRINTER_STATUS => chr(0x1B).'iS',
        PRINT_FEED => chr(0x1A),
        PRINT_NOFEED => chr(0x0C), # Not supposed to feed the tape, but it does!
        SEND_RASTER => 'G',
        EMPTY_RASTER => 'Z'
        );
    our @STATUS_BYTES = (
        { name => 'Print head mark', always => "\x80" },
        { name => 'Size', always => ' ' },
        { name => 'Brother code', always => 'B' },
        { name => 'Series code', always => '0' },
        { name => 'Model code', ischar => 1 },
        { name => 'Country code', always => '0' },
        { name => 'Reserved', always => "\0" },
        { name => 'Reserved', always => "\0" },
        { name => 'Error information 1', bits =>
              [ 'No media', undef, 'Cutter jam', 'Weak batteries', undef,
                undef, 'High-voltage adapter'
              ] },
        { name => 'Error information 2', bits =>
              [ 'Replace media', undef, undef, undef, 'Cover open',
                'Overheating' ] },
        { name => 'Media width' },
        { name => 'Media type', values => {
            0 => 'None', 1 => 'Laminated', 3 => 'Non-laminated',
            17 => 'Heat shrink tube', 255 => 'Incompatible tape'
          } },
        { name => 'Number of colors', always => "\0" },
        { name => 'Fonts', always => "\0" },
        { name => 'Japanese Fonts', always => "\0" },
        { name => 'Mode' },
        { name => 'Density', always => "\0" },
        { name => 'Media length' },
        { name => 'Status type' },
        { name => 'Phase type' },
        { name => 'Phase number HO', always => "\0" },
        { name => 'Phase number LO', always => "\0" },
        { name => 'Notification number' },
        { name => 'Expansion area', always => "\0" },
        { name => 'Tape color information' },
        { name => 'Text color information' },
        { name => 'Hardware settings 0' },
        { name => 'Hardware settings 1' },
        { name => 'Hardware settings 2' },
        { name => 'Hardware settings 3' },
        { name => 'Reserved', always => "\0" },
        { name => 'Reserved', always => "\0" }
        );

    sub new {
        my ($class, $device) = @_;

        my $this = bless({ device => $device }, $class);
        
        $this->open_printer();

        my $report = $this->get_status_report();
        
        #$this->report($report);

        # Use the report to determine parameters
        #
        # media_width_mm - width of tape media in mm
        # raster_px - number of pixels in a raster line
        # raster_mm - width of a raster line in mm
        # printable_width_px - number of pixels at the centre of each
        # raster line that are printable, will be <= raster_px. Limited by the
        # number of pins on the device, or the media width if narrower.

        $this->{media_width_mm} = $report->{'Media width'};
        if ($report->{'Model code'} eq 'Y') {
            $this->{raster_mm} = 18;
            $this->{raster_px} = 128;
            $this->{printable_width_px} = 64; # max no of pins available
        } else {
            die "Don't know enough about model code $report->{'Model code'}";
        }

        # pixel_width_mm - width of a single pixel in mm
        $this->{pixel_width_mm} = $this->{raster_mm} / $this->{raster_px};

        $this->report('A raster is ', $this->{raster_px}, 'px (',
                     $this->{raster_mm}, 'mm) wide, max printable width is ',
                     $this->{printable_width_px}, 'px (',
                     $this->{printable_width_px} * $this->{pixel_width_mm},
                     'mm)');       

        # Derive other parameters
        # media_width_px - width of tape media in px
        # printable_width_mm - width in mm of the printable area
        
        $this->{media_width_px} = $this->{media_width_mm} / $this->{pixel_width_mm};
        $this->report('Media is ', $this->{media_width_px}, 'px (',
                     $this->{media_width_mm}, 'mm) wide');
        
        if ($this->{media_width_px} < $this->{printable_width_px}) {
            $this->{printable_width_px} =
                $this->{media_width_mm} / $this->{pixel_width_mm};
            $this->report('Reducing printable area to ',
                         $this->{printable_width_px}, 'px for ',
                         $this->{media_width_mm}, 'mm media');
        }
        $this->{printable_width_mm} = 
            $this->{printable_width_px} * $this->{pixel_width_mm};

        $this->report('Printable width is ', $this->{printable_width_px}, 'px (',
                     $this->{printable_width_mm}, 'mm)');
        
        return $this;
    }

    sub report {
        my $this = shift;
        main::report('Printer: ', @_);
    }
    
    sub open_printer {
        my $this = shift;
        my $fh;
        # This *should* give us blocking IO
        sysopen($fh, $this->{device}, Fcntl::O_RDWR) || die $!;
        binmode($fh);
        $fh->autoflush(1);
        syswrite($fh, $PROTOCOL{INVALIDATE} x 100);
        syswrite($fh, $PROTOCOL{INITIALISE_CLEAR});
        $this->{fh} = $fh;
    }

    # Get a status report from the printer (use existing fh)
    sub get_status_report {
        my ($this) = @_;
        
        syswrite($this->{fh}, $PROTOCOL{SEND_PRINTER_STATUS});

        my $reply = ' ' x 32;
        my $rb;
        
        my $retry = 20;
        while ($retry--) {
            $rb = sysread($this->{fh}, $reply, 32);
            $this->report('Status ', $!, ' ', length($reply), ' ', scalar(@STATUS_BYTES));
            last if length($reply) == 32;
            select(undef, undef, undef, 0.25);
        }
        die "Could not get status" unless length($reply);
        my @response = split(//, $reply);

        my %analysis;
        foreach my $sb (@STATUS_BYTES) {
            my $r = shift(@response);
            if (defined $sb->{always}) {
                $this->report('Unexpected ', $sb->{name},' in status; got ',
                       ord($r), " but expected ", ord($sb->{always}))
                    unless $r eq $sb->{always};
            } elsif (defined $sb->{bits}) {
                $r = ord($r);
                my $mask = 1;
                my @set;
                foreach my $bit (@{$sb->{bits}}) {
                    next unless ($r & $mask) != 0;
                    if (defined $bit) {
                        push(@set, $bit);
                    } else {
                        push(@set, sprintf("%02x", $mask));
                    }
                    $mask *= 2;
                }
                $analysis{$sb->{name}} = join('|', @set);
            } elsif (defined $sb->{values}) {
                $analysis{$sb->{name}} =
                    $sb->{values}->{ord($r)};
            } elsif ($sb->{ischar}) {
                $analysis{$sb->{name}} = $r;
            } else {
                $analysis{$sb->{name}} = ord($r);
            }
        }

        return \%analysis;
    }

    # Eject the tape
    sub eject {
        my $this = shift;
        syswrite($this->{fh}, $PROTOCOL{PRINT_FEED});
        $this->report("Ejected");
    }

    # Format and print the image on a single tape
    sub print_image {
        my ($this, $pb) = @_;

        die "No pixbuf" unless ($pb);
        my $pngdata = $pb->save_to_buffer('png');
        my $gdimage = GD::Image->newFromPngData($pngdata);

        # we turn it 90 degrees before anything else to orient to the printer
        $gdimage = $gdimage->copyRotate90();

        # pixbuf
        my @pixel = ();
    
        # Width/height of image in pixels
        my ($width, $height) = $gdimage->getBounds();

        $this->report('Print ', $width, ' X ', $height, ' image');

        #my $b = $gdimage->colorAllocate(0, 0, 0);
        #$gdimage->line(0, 0, $width, $height, $b);
        #$gdimage->line(0, $height, $width, 0, $b);

        if ($width > $this->{printable_width_px}) {
            # Just do the best we can.
            $this->report('Losing ', $width - $this->{printable_width_px},
                   'px from the image');
            $width = $this->{printable_width_px};
        }
        my $offset = ($this->{raster_px} - $width) / 2;
       
        $this->report('Print width ', $width, 'px');
        $this->report('Raster padding ', $offset, 'px');
        
        my $fh = $this->{fh};
        syswrite($fh, $PROTOCOL{SET_RASTER_TRANSFER_MODE});
        for (my $y = $height - 1; $y >= 0 ; $y--) {
            my $raster = '';

            # Pack 8 pixels into an 8 bit byte
            my $x;
            my $byte = 0;
            my $bit = 0;
            for ($x = 0; $x < $offset; $x++) {
                if (++$bit == 8) {
                    $raster .= "\0";
                    $bit = 0;
                }
            }
            for ($x = 0; $x < $width; $x++) {
                my $tmpcolor = $gdimage->getPixel($x, $y);
                my ($r, $g, $b) = $gdimage->rgb($tmpcolor);
                # it's B/W, so we only need to compare one value
                # SMELL: use alpha?
                $byte |= (0x80 >> $bit) if $r < 150;
                if (++$bit == 8) {
                    $raster .= chr($byte);
                    $byte = 0;
                    $bit = 0;
                }
            }
            $raster .= chr($byte) if $bit;
            if ($raster =~ /[^\x00]/) {
                syswrite($fh, $PROTOCOL{SEND_RASTER});
                syswrite($fh, chr(length($raster) % 256));
                syswrite($fh, chr(int(length($raster) / 256)));
                syswrite($fh, $raster);
            } else {
                syswrite($fh, $PROTOCOL{EMPTY_RASTER});
            }
        }
        syswrite($fh, $PROTOCOL{PRINT_FEED});
        my $report = $this->get_status_report();
        $this->report($report);
    }
}

{
    package Label;

    sub new {
        my $this = bless({
            # Text of the label
            text => "",
            # Boolean, true to invert the label
            inverse => 0,
            # int, px horz margin between text and edge
            hmargin => 2,
            # Horizontal alignment of label - left = 0, centre = 1, right = 2
            halign => 1,
            # Offset of the label in the all-labels picture
            image_offset => 0
                         }, shift);
        return $this;
    }

    sub report {
        my $this = shift;
        main::report('Label: ', @_);
    }
    
    sub from_ui {
        my $this = shift;

        # Get the text from the text widget
        my $buffer = $ui->get_object('text')->get_buffer();
        my ($start, $end) = $buffer->get_bounds();
        $this->{text} = $buffer->get_text($start, $end, 1);
        #print STDERR "UI get '$this->{text}'\n";
        $this->{inverse} = $ui->get_object('inverse')->get_active();
        $this->{halign} = $ui->get_object('halign')->get_active();
        $this->{hmargin} = $ui->get_object('hmargin')->get_value();
    }

    sub to_ui {
        my $this = shift;
        my $buffer = $ui->get_object('text')->get_buffer();
        # SMELL: only way I could get GTK to work
        my $s = $this->{text};
        $s = Encode::decode(
            'utf8', Encode::encode(
                'utf8', $s,Encode::FB_CROAK),
            Encode::FB_CROAK);
        #print STDERR "UI set '$this->{text}'\n";
        $buffer->set_text($s);#this->{text});
        $ui->get_object('inverse')->set_active($this->{inverse});
        $ui->get_object('halign')->set_active($this->{halign});
        $ui->get_object('hmargin')->set_value($this->{hmargin});
    }

    # Lay out the label in an image. If $for_display is true, the image
    # will be bloated by $HIGHLIGHT_BORDER to create a highlight
    # region, and edge lines added to show the edge of the tape if the
    # image is wider than $print_width.
    sub render {
        my ($this, $for_display, $print_width) = @_;

        # Create a 0-sized surface just for measuring text
        my $surface = Cairo::ImageSurface->create('argb32', 0, 0);
        my $context = Cairo::Context->create($surface);
        my $layout;

        my $border = ($for_display ? $HIGHLIGHT_BORDER : 0);
        
        # A label may be made up of multiple lines of text. Layout each line
        # separately. Note we'll get an error if a <span> is broken
        # across lines, but this is the easiest way to lay out lines
        # in the middle of their available space. Each line is laid
        # out in the minimum required space.
        my @lines;
        my $inner_height = 0; # total height of the label.
        my $inner_width = 10;  # width of the widest line in the label.
        foreach my $line (split(/\n/, $this->{text})) {
            $layout = Pango::Cairo::create_layout($context);
            # Set the default font
            $layout->set_font_description($default_fontdesc);
            $layout->set_markup($line);
            my ($xsize, $ysize) = $layout->get_pixel_size();
            #$this->report "'", $line, "' is ", $xsize, ' X ', $ysize;
            $inner_height += $ysize;
            $xsize += 2 * $this->{hmargin};
            $inner_width = $xsize if $xsize > $inner_width;
            push(@lines, {
                width  => $xsize,
                height => $ysize,
                text => $line
                 });
        }
        
        if ($inner_width == 0) {
            #print STDERR "Zero width label $this->{text}\n";
            return;
        }

        # Remember how wide the label (not the surface) is
        $this->{pxheight} = $inner_height;
        $this->{pxwidth} = $inner_width;
        
        # Space above, below, and between lines
        my $space = ($print_width - $inner_height) / (scalar(@lines) + 1);
        $space = 0 if $space < 0;
        
        # Create the rendering surface.
        # 32 bits per pixel is complete overkill!
        my $surfw = $inner_width + 2 * $border;
        my $surfh = $inner_height + 2 * $border;
        $surface = Cairo::ImageSurface->create(
            'argb32', $surfw, $surfh);

        #$this->report('Label requires width ', $inner_height);
        #$this->report('Printer offers ', $print_width);
        #$this->report('Surface is ', $surfw, ' X ', $surfh);
        #$this->report('Space is ', $space);

        $context = Cairo::Context->create($surface);

        if ($for_display) {
            # Paint the highlight border
            $context->set_source_rgb(@RED);
            $context->rectangle(0, 0, $surfw, $surfh);
            $context->fill();
        }

        # Paint the label background
        $context->set_source_rgb($this->{inverse} ? @BLACK : @WHITE);
        $context->rectangle($border, $border,
                            $surfw - 2 * $border, $surfh - 2 * $border);
        $context->fill();

        # Paint the label
        $context->set_source_rgb($this->{inverse} ? @WHITE : @BLACK);

        # Alignment within the available space
        my $yoff = $border + $space;
        foreach my $line (@lines) {
            my $xoff = $border;
            
            if ($this->{halign} == 0) {
                $xoff += $this->{hmargin};
            } elsif ($this->{halign} == 1) {
                $xoff += ($inner_width - $line->{width}) / 2;
            } elsif ($this->{halign} == 2) {
                $xoff += $inner_width - $this->{hmargin} - $line->{width};
            }
            $context->move_to($xoff, $yoff);
            $layout = Pango::Cairo::create_layout($context);
            # Set the default font
            $layout->set_font_description($default_fontdesc);
            $layout->set_markup($line->{text});
            Pango::Cairo::show_layout($context, $layout);
            $yoff += $line->{height} + $space;
        }

        # Add areas to indicate tape width if required
        if ($for_display && $inner_height > $print_width) {
            $context->set_source_rgba(@BLACK, 0.2);
            my $inset = ($inner_height - $print_width) / 2;
            $context->rectangle($border, $border,
                                $surfw - $border, $inset);
            $context->fill();
            $context->rectangle($border, $surfh - $border - $inset,
                                $surfw - $border, $inset);
            $context->fill();
        }
        
        $context->show_page();

        return $surface;
    }
}

# -- GUI elements -----------------------------------------------------------
sub kill_editorwindow {
    Gtk2->main_quit();
    save_config();
}

# Print out the result
sub print_clicked_cb {
    my $pb = render_labels(0, $printer->{printable_width_px});
    $printer->print_image($pb);
}

# Print out the result with more or less ghetto way of passing data
# from pixbuf to GD.
sub eject_clicked_cb {
    $printer->eject();
}

sub label_at {
    my $x = shift;

    my $n = 0;
    foreach my $label (@labels) {
        if ($label->{image_offset} > $x) {
            return $n - 1;
        }
        $n++;
    }
    return scalar(@labels) - 1;
}

# $for_display should be false when rendering the print buffer
sub render_labels {
    my ($for_display, $print_width) = @_;

    return undef unless scalar(@labels);

    my $superwidth = 0;
    my $superheight = 0;

    my @surfaces;
    foreach my $label (@labels) {
        #print STDERR "Render $label->{text}\n";
        my $surface = $label->render($for_display, $print_width);
        if ($surface) {
            $superwidth += $surface->get_width();
            my $h = $surface->get_height();
            $superheight = $h if $h > $superheight;
        }
        push(@surfaces, $surface);
    }
    return unless $superwidth;

    $superwidth += $INTER_LABEL_GAP * (scalar(@labels) - 1);

    # Create a super-pixbuf with all the labels.
    #print STDERR "Supersize $superwidth X $superheight\n";
    my $pixbuf = Gtk2::Gdk::Pixbuf->new(
        'rgb', 1, 8, $superwidth, $superheight);

    # Fill background with a funny colour so we can see
    # inter-label cut lines
    $pixbuf->fill(0xCAFEBABE);

    my $xoff = 0;
    for (my $i = 0; $i < scalar(@labels); $i++) {
        my $label = $labels[$i];
        my $surface = $surfaces[$i];

        my $highlight = ($for_display && $i == $current_label);

        # Contrary to the Cairo doc, 'rgb24' format has an alpha channel
        my $lpb = Gtk2::Gdk::Pixbuf->new_from_data(
            $surface->get_data(),
            'rgb', 1, 8,
            $surface->get_width(),
            $surface->get_height(),
            $surface->get_stride());

        #print STDERR "Layout ".$lpb->get_width()." X ".$lpb->get_height()
        #    ." label $i at $xoff\n";
        $label->{image_offset} = $xoff;
        $lpb->copy_area(0, 0, $lpb->get_width(), $lpb->get_height(),
                        $pixbuf, $xoff, 0);
        $xoff += $lpb->get_width() + $INTER_LABEL_GAP;
    }
    return $pixbuf;
}

sub attribute_clicked {
    my $attr = shift;
    my $buffer = $ui->get_object('text')->get_buffer();
    return 0 unless $buffer->get_has_selection();
    my ($start, $end) = $buffer->get_selection_bounds();
    my $text = $buffer->get_text($start, $end, 1);
    $buffer->delete($start, $end);
    my $parms = join(" ", @_);
    $parms = " $parms" if $parms;
    report('Set ', $attr, $parms);
    $buffer->insert($start, "<$attr$parms>$text</$attr>");
    current_label()->from_ui() if current_label();
    update_previews();
}

sub underline_clicked_cb   { attribute_clicked('u');   }
sub tt_clicked_cb          { attribute_clicked('tt'); }
sub italic_clicked_cb      { attribute_clicked('i');   }
sub bold_clicked_cb        { attribute_clicked('b');   }
sub sub_clicked_cb         { attribute_clicked('sub'); }
sub sup_clicked_cb         { attribute_clicked('sup'); }

sub font_set_cb {
    my $font = $ui->get_object('font')->get_font_name();
    unless (attribute_clicked("span", "font=\"$font\"")) {
        # If there is no currently selected text, set the default
        report('Set default font ', $ui->get_object('font')->get_font_name());
        $default_fontdesc = Pango::FontDescription->from_string(
            $ui->get_object('font')->get_font_name());
    }
    update_previews();
}

# Reset the selected label when the number of labels changes
sub adjust_label_count {
    $ui->get_object('label_index_adjustment')->
        set_upper(scalar(@labels) - 1);
}

sub label_index_changed_cb {
    current_label($ui->get_object('label_index')->get_value());
}

# Callback used for a UI change, shared by several controls
sub ui_changed_cb {
    current_label()->from_ui() if current_label();
    update_previews();
}

# Get/set selected label
# To set, pass the index of the newly selected label
sub current_label {
    if (scalar(@_)) {
        $current_label = shift;
        report('Select label ', $current_label);
        $labels[$current_label]->to_ui();
        foreach my $k (@PER_LABEL_CFG) {
            $ui->get_object($k)->set_sensitive(1);
        }
        $ui->get_object('label_index')->set_value($current_label);
        $ui->get_object('text')->grab_focus();
        update_previews();
    }
    if ($current_label >= 0 && $current_label < scalar(@labels)) {
        return $labels[$current_label];
    }
    return undef;
}

# Callback to add a new label
sub add_label_clicked_cb {
    my $label = new Label();
    push(@labels, $label);
    adjust_label_count();
    current_label(scalar(@labels) - 1);
}

# C allback to delete the current label
sub delete_label_clicked_cb {
    return unless current_label();
    report('Delete label ', $current_label);
    splice(@labels, $current_label, 1);
    if ($current_label == scalar(@labels)) {
        $current_label--;
        current_label($current_label);
    } elsif ($current_label >= 0) {
        current_label($current_label);
    } else {
        current_label(-1);
    }
    adjust_label_count();
    report('Selected label ', current_label);
}

# Callback for mouse down in the "preview all" window
sub mouse_down_cb {
    my ($scroll, $event) = @_;
    # the x,y are relative to the viewport
    my $x = $event->x() + $scroll->get_hadjustment()->get_value();
    my $im = $ui->get_object("all_image");
    my $ipb = $im->get_pixbuf();
    my $all = $im->get_allocation();
    if ($ipb->get_width() < $all->width()) {
        $x -= ($all->width() - $ipb->get_width()) / 2;
    }
    #print STDERR "Mouse at $x\n";
    current_label(label_at($x));
}

# React to most GUI changes, update the previews to match the settings.
sub update_previews {
    # Enable the print button if we have some labels
    $ui->get_object('print')->set_sensitive(scalar(@labels));
    my $pb = render_labels(1, $printer->{printable_width_px});

    if ($pb) {
        $ui->get_object('print')->set_sensitive(1);
        $ui->get_object('all_image')->set_from_pixbuf($pb);
    } else {
        $ui->get_object('print')->set_sensitive(1);
        $ui->get_object('all_image')->clear();
    }
    my $cl = current_label();
    my $size = '';
    if ($cl) {
        my $surface = $cl->render(1, $printer->{printable_width_px});
        my $lpb = Gtk2::Gdk::Pixbuf->new_from_data(
            $surface->get_data(),
            'rgb', 1, 8,
            $surface->get_width(),
            $surface->get_height(),
            $surface->get_stride());
        
        $ui->get_object('current_image')->set_from_pixbuf($lpb);
        my $mmwidth = $cl->{pxwidth} * $printer->{pixel_width_mm};
        my $mmheight = $cl->{pxheight} * $printer->{pixel_width_mm};
        $size = "$cl->{pxwidth}px (${mmwidth}mm) X $cl->{pxheight}px (${mmheight}mm)";
    } else {
        $ui->get_object('current_image')->clear();
    }
    $ui->get_object('label_size')->set_text($size);

}

sub encode {
    $_[0] = '' unless defined $_[0];
    $_[0] =~ s/\\/\\\\/g;
    $_[0] =~ s/\n/\\n/g;
    return $_[0];
}

sub decode {
    $_[0] = '' unless defined $_[0];
    $_[0] =~ s/\\n/\n/g;
    $_[0] =~ s/\\\\/\\/g;
    return $_[0];
}

sub save_config {
    my $f;
    report('Saving to ', $SETTINGS_FILE);

    open($f, '>:encoding(utf8)', $SETTINGS_FILE) || die $!;
    foreach my $opt (@GLOBAL_CFG) {
        my $spec = $CONFIG->{$opt};
        next if $opt eq 'default';
        my $save = ($spec && $spec->{save}) || $CONFIG->{default}->{save};
        print $f "$opt=" . encode(&$save($ui->get_object($opt))) . "\n";
    }
    for (my $i = 0; $i < scalar(@labels); $i++) {
        my $label = $labels[$i];
        foreach my $k ( @PER_LABEL_CFG ) {
            if (defined $label->{$k}) {
                print $f "label$i$k=".encode($label->{$k})."\n";
            }
        }
    }
    print $f "current_label=$current_label\n" if
        ($current_label >= 0 && $current_label < scalar(@labels));
    close($f);
}

sub load_config {
    $ui->get_object('halign')->set_active(0);
    return unless -e $SETTINGS_FILE;
    open(my $f, '<:encoding(utf8)', $SETTINGS_FILE) || die $!;
    local $/ = "\n";
    foreach my $setting (<$f>) {
        chomp($setting);
        next unless $setting;
        my ($k, $v) = split("=", $setting, 2);
        $v = decode($v);
        #print STDERR "Load '$k' = '$v'\n";
        if ($k =~ /^label(\d+)(.*?)$/) {
            my ($n, $k) = ($1, $2);
            unless ($labels[$n]) {
                $labels[$n] = new Label();
                #print STDERR "Made label $n\n";
            }
            $labels[$n]->{$k} = $v;
            #print STDERR "Label[$n]->{$k}=".$labels[$n]->{$k}."\n";
        } elsif ($k eq 'current_label') {
            current_label($v);
        } else {
            my $spec = $CONFIG->{$k};
            my $load = ($spec && $spec->{load}) || $CONFIG->{default}->{load};
            my $obj = $ui->get_object($k);
            next unless $obj;
            #report "Load $k";
            &$load($obj, $v);
        }
    }
    close($f);

    adjust_label_count();
    $default_fontdesc = Pango::FontDescription->from_string(
        $ui->get_object('font')->get_font_name());
}

sub init_ui {
    $ui = Gtk2::Builder->new();
    $ui->add_from_file($GLADE_FILE);
    $ui->connect_signals();

    load_config();

    $ui->get_object('text')->get_buffer()->signal_connect('changed', \&ui_changed_cb);
    update_previews();
}

binmode(STDIN,  ":utf8");
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");

die "No device specified; consider /dev/usb/lp0"
    unless (scalar(@ARGV));

$printer = Printer->new(@ARGV);

init_ui();
Gtk2->main();
